using System;
using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using System.Text;
using Autodesk.AutoCAD.Runtime;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;


namespace AutoGeneratedSteps_AutoCAD
{
    public class Class1
    {
        [CommandMethod("ExtractToPDF")]
        public void ExtractToPDF()
        {
            string extractedData = ExtractEntitiesFromDrawing();

            // Generate PDF with extracted data
            GeneratePDF(extractedData);
        }

        private string ExtractEntitiesFromDrawing()
        {
            StringBuilder output = new StringBuilder();

            Autodesk.AutoCAD.ApplicationServices.Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;

            using (Transaction trans = db.TransactionManager.StartTransaction())
            {
                BlockTable bt = trans.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;

                foreach (ObjectId btrId in bt)
                {
                    BlockTableRecord btr = trans.GetObject(btrId, OpenMode.ForRead) as BlockTableRecord;

                    foreach (ObjectId entId in btr)
                    {
                        Entity ent = trans.GetObject(entId, OpenMode.ForRead) as Entity;

                        // Process different types of entities
                        if (ent != null)
                        {
                            // Retrieve entity type
                            string entityType = ent.GetType().Name;

                            // Example: Extracting information based on entity type
                            switch (entityType)
                            {
                                case "Line":
                                    Line line = ent as Line;
                                    Point3d startPoint = line.StartPoint;
                                    Point3d endPoint = line.EndPoint;
                                    output.AppendLine($"Line : \n");
                                    output.AppendLine($"    * Start Point: {startPoint}, End Point: {endPoint} \n");
                                    output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    break;

                                case "Circle":
                                    Circle circle = ent as Circle;
                                    Point3d center = circle.Center;
                                    double radius = circle.Radius;
                                    output.AppendLine($"Circle : \n");
                                    output.AppendLine($"    * Center: {center}, Radius: {radius} \n");
                                    output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    break;

                                case "Arc":
                                    Arc arc = ent as Arc;
                                    Point3d arcCenter = arc.Center;
                                    double arcRadius = arc.Radius;
                                    double startAngle = arc.StartAngle;
                                    double endAngle = arc.EndAngle;
                                    output.AppendLine($"Arc : \n");
                                    output.AppendLine($"    * Center: {arcCenter}, Radius: {arcRadius}, Start Angle: {startAngle}, End Angle: {endAngle}\n");
                                    output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    break;

                                case "Ellipse":
                                    Ellipse ellipse = ent as Ellipse;
                                    Point3d ellipseCenter = ellipse.Center;
                                    double majorAxis = ellipse.MajorRadius;
                                    double minorAxis = ellipse.MinorRadius;
                                    output.AppendLine($"Ellipse : \n");
                                    output.AppendLine($"    * Center: {ellipseCenter}, Major Axis: {majorAxis}, Minor Axis: {minorAxis}\n");
                                    output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    break;

                                case "Polyline":
                                    Polyline polyline = ent as Polyline;
                                    if (polyline != null && polyline.Closed)
                                    {
                                        // Extracting information from a closed polyline (like a Polygon)
                                        int numberOfVertices = polyline.NumberOfVertices;
                                        output.AppendLine($"Polygon - Number of Vertices: {numberOfVertices}\n");
                                        // Extract other properties as needed
                                        for (int i = 0; i < polyline.NumberOfVertices; i++)
                                        {
                                            Point2d vertex = polyline.GetPoint2dAt(i);
                                            output.AppendLine($"    * Vertex {i + 1}: {vertex}\n");
                                        }
                                        output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    }
                                    break;

                                case "LWPolyline":
                                    Polyline lwPolyline = ent as Polyline;
                                    if (lwPolyline != null && lwPolyline.Closed)
                                    {
                                        // Extracting information from a lightweight polyline (like a Rectangle)
                                        int numberOfVertices = lwPolyline.NumberOfVertices;
                                        output.AppendLine($"Rectangle - Number of Vertices: {numberOfVertices}\n");
                                        // Extract other properties as needed
                                        for (int i = 0; i < lwPolyline.NumberOfVertices; i++)
                                        {
                                            Point2d vertex = lwPolyline.GetPoint2dAt(i);
                                            output.AppendLine($"    * Vertex {i + 1}: {vertex} \n");
                                        }
                                        output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    }
                                    break;

                                case "Spline":
                                    Spline spline = ent as Spline;
                                    // Extract control points, knots, etc., from the spline
                                    if (spline != null)
                                    {
                                        // Extract control points, knots, etc., from the spline
                                        output.AppendLine($"Spline : \n");
                                        for (int i = 0; i < spline.NumControlPoints; i++)
                                        {
                                            Point3d controlPoint = spline.GetControlPointAt(i);                                           
                                            output.AppendLine($"    * Control Point {i + 1}: {controlPoint} \n");
                                        }
                                        output.AppendLine($"---------------------------------------------------------------------------------------------------- \n");
                                    }
                                    break;

                                // Add cases for other entity types like Rectangle, Polygon, etc.

                                default:
                                    // Handle other entity types if necessary
                                    break;
                            }
                        }
                    }
                }

                trans.Commit();
            }

            return output.ToString();
        }

        private void GeneratePDF(string content)
        {
            iTextSharp.text.Document doc = new iTextSharp.text.Document();
            string filePath = "D:\\ObjectARX\\Hackathon\\.NET\\output\\Report.pdf"; // Change this to your desired path

            string author = "Object ARX .NET API ----> By Mugiwara \n";
            DateTime currentDateTime = DateTime.Now;

            PdfWriter.GetInstance(doc, new FileStream(filePath, FileMode.Create));

            doc.Open();
            doc.Add(new Paragraph($"***** REPORT : DATA EXTRACTED FROM AUTOCAD COMMANDLINE ***** \n"));
            doc.Add(new Paragraph($"-------------------------------------------------------------------------------------------------------------\n"));
            doc.Add(new Paragraph($"** Drawing Creation Date: {currentDateTime} \n"));
            doc.Add(new Paragraph($"** Author: {author} \n"));
            doc.Add(new Paragraph("========================================================================== \n"));
            doc.Add(new Paragraph(content));
            doc.Close();
        }
    }
}
